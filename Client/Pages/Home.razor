@page "/"

@using Client.Interfaces
@using Client.Model
@inject IFeedbackService feedbackService

<PageTitle>Feedback</PageTitle>

<h1>Please, leave your feedback</h1>

<form>
    <div class="form-group">
        <label for="starsSelect">Stars</label>
        <select class="form-control" id="starsSelect" @bind="starsInput">
            <option>5</option>
            <option>4</option>
            <option>3</option>
            <option>2</option>
            <option>1</option>
        </select>
        @if (starsInvalid)
        {
            <span>@starsErrorMessage</span>
        }
    </div>
    <div class="form-group">
        <label for="messageTextarea">Message</label>
        <textarea class="form-control" id="messageTextarea" @bind="messageInput" rows="8"></textarea>
        @if (messageInvalid)
        {
            <span>@messageErrorMessage</span>
        }
    </div>
</form>

@if (processing == false)
{
    <button type="submit" @onclick="Post" class="btn btn-primary mt-3">Send</button>
}
else
{
    <button type="submit" class="btn btn-primary mt-3">Processing...</button>
}

@if (_feedbackWithAnalysis.FeedbackMessage != null)
{
    <div class="mt-5">
        <h3>Analysis</h3>
        <h4>Sentiment: @_feedbackWithAnalysis.AnalyseInfo.FeedbackSentiment</h4>
        <h5>Positive score: @_feedbackWithAnalysis.AnalyseInfo.PositiveScore</h5>
        <h5>Negative score: @_feedbackWithAnalysis.AnalyseInfo.NegativeScore</h5>
        <h5>Neutral score: @_feedbackWithAnalysis.AnalyseInfo.NeutralScore</h5>
        <h4>Opinions:</h4>
        @foreach (var item in _feedbackWithAnalysis.AnalyseOpinions)
        {
            <p>@item.Target - @item.Value</p>
        }
    </div>
}

@code {
    private int starsInput;
    private bool starsInvalid = false;
    private string starsErrorMessage = "Please, chose rating";
    private string messageInput = string.Empty;
    private bool messageInvalid = false;
    private string messageErrorMessage = String.Empty;

    private bool processing = false;

    private FeedbackMessage _feedbackMessage = new FeedbackMessage();
    private FeedbackWithAnalysis _feedbackWithAnalysis = new FeedbackWithAnalysis();

    private async Task Post()
    {
        processing = true;

        if (!Validate())
            return;

        _feedbackMessage.OrderId = 1;
        _feedbackMessage.UserId = 1;
        _feedbackMessage.Stars = starsInput;
        _feedbackMessage.Message = messageInput;

        _feedbackWithAnalysis = await feedbackService.PostFeedback(_feedbackMessage);

        processing = false;
    }

    private bool Validate()
    {
        bool valid = true;

        if (starsInput <= 0 || starsInput > 5)
        {
            starsInvalid = true;
            valid = false;
        }
        else
        {
            starsInvalid = false;
        }
        if (messageInput.Length < 50)
        {
            messageInvalid = true;
            messageErrorMessage = "Message must be longer than 50 symbols";
            valid = false;
        }
        else if (messageInput.Length > 5120)
        {
            messageInvalid = true;
            messageErrorMessage = "Message must be no longer than 5210 symbols";
            valid = false;
        }
        else
        {
            messageInvalid = false;
        }

        return valid;
    }

}